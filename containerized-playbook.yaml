---
- hosts: master:nodes
  become: true
  name: Hacks for now
  tasks:
    - name: Change the root passwd and disable selinux
      shell: chdir=/etc/sysconfig {{ item }}
      with_items:
        - echo "root:vagrant" | chpasswd
        - sed -i -e 's/^SELINUX=enforcing/SELINUX=permissive/' selinux
        - setenforce 0

- hosts: master
  become: true
  vars:
    masterip: "{{ hostvars[groups.master[0]]['ansible_ssh_host'] }}"
  tasks:
    - name: Hostnames and IP addresses
      debug: msg="System {{ hostvars[item]['inventory_hostname'] }} has IP {{hostvars[item]['ansible_ssh_host'] }}"
      with_items: "{{ groups.all }}"

    - name: Create local certs directory
      local_action: file path=certs state=directory
      become: false

    - name: Create master cert conf
      local_action: template src=server_ssl_conf.j2 dest=certs/{{ ansible_hostname }}.conf
      become: false

    - name: Create node cert conf
      local_action: template src=node_ssl_conf.j2 dest=certs/{{ item }}.conf
      with_items: "{{ groups.nodes }}"
      become: false

    - name: Generate CA key
      local_action: command chdir=certs openssl genrsa -out ca.key 2048
      become: false

    - name: Generate CA cert
      local_action: command chdir=certs openssl req -x509 -new -nodes -key ca.key -subj "/CN={{ item }}" -days 10000 -out ca.crt -config {{ item }}.conf
      with_items: "{{ groups.master }}"
      become: false

    - name: Generate Master/Node key
      local_action: command chdir=certs openssl genrsa -out {{ item }}.key 2048
      with_items:
        - "{{ groups.master }}"
        - "{{ groups.nodes }}"
      become: false

    - name: Generate new Master/Node csr
      local_action: command chdir=certs openssl req -new -key {{ item }}.key -subj "/CN={{ item }}" -out {{ item }}.csr
      with_items:
        - "{{ groups.master }}"
        - "{{ groups.nodes }}"
      become: false

    - name: Generate Master/Node cert
      local_action: command chdir=certs openssl x509 -req -in {{ item }}.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out {{ item }}.crt -days 10000 -extensions v3_req -extfile {{ item }}.conf
      with_items:
        - "{{ groups.master }}"
        - "{{ groups.nodes }}"
      become: false

    - name: Copy certs from localhost to Master
      synchronize: src=certs dest=/etc/kubernetes/

    - name: /etc/etcd/etcd.conf
      template: src=etcd.conf.j2 dest=/etc/etcd/etcd.conf
      with_items: "{{ groups.master }}"

    - name: kubeconfigs
      template: src=kubeconfig.j2 dest=/etc/kubernetes/{{ item[0] }}.kubeconfig
      with_nested:
        - ['controller-manager', 'proxy', 'scheduler', 'kubelet']
        - ["{{ansible_hostname }}"]

    - name: Create manifests directory
      file: path=/etc/kubernetes/manifests state=directory

    - name: /etc/kubernetes/manifests/apiserver.pod.json
      template: src=apiserver.pod.j2 dest=/etc/kubernetes/manifests/apiserver.pod.json
      with_items: "{{ groups.master }}"

    - name: /etc/kubernetes/manifests/controller-manager.pod.json
      template: src=controller-manager.pod.j2 dest=/etc/kubernetes/manifests/controller-manager.pod.json
      with_items: "{{ groups.master }}"

    - name: /etc/kubernetes/manifests/scheduler.pod.json
      template: src=scheduler.pod.j2 dest=/etc/kubernetes/manifests/scheduler.pod.json
      with_items: "{{ groups.master }}"

    - name: /etc/kubernetes/apiserver
      template: src=apiserver.j2 dest=/etc/kubernetes/apiserver
      with_items: "{{ groups.master }}"

    - name: /etc/kubernetes/config
      template: src=config.j2 dest=/etc/kubernetes/config

    - name: /etc/kubernetes/controller-manager
      template: src=controller-manager.j2 dest=/etc/kubernetes/controller-manager
      with_items: "{{ groups.master }}"

    - name: /etc/kubernetes/proxy
      template: src=proxy.j2 dest=/etc/kubernetes/proxy

    - name: /etc/kubernetes/scheduler
      template: src=scheduler.j2 dest=/etc/kubernetes/scheduler

    - name: /etc/kubernetes/kubelet
      template: src=kubelet-master.j2 dest=/etc/kubernetes/kubelet

    - name: Enable kube services
      command: systemctl enable etcd.service kube-proxy.service kubelet.service

    - name: Start kube services
      command: systemctl start etcd.service kube-proxy.service kubelet.service

    - name: Wait for kubelet to pull/start kube master pods
      wait_for: port=6443 delay=10 timeout=600

    - name: Create node files
      template: src=node_config.j2 dest=/etc/kubernetes/{{ item }}.yaml
      with_items: "{{ groups.nodes }}"

    - name: Add nodes
      command: kubectl create -f /etc/kubernetes/{{ item }}.yaml
      with_items: "{{ groups.nodes }}"

    - name: Create flanneld network configuration
      template: src=flanneld_network.j2 dest=/etc/kubernetes/flanneld.json

    - name: Add flanneld config to etcd
      shell: etcdctl --endpoint https://{{ item}}:4001 --cert-file /etc/kubernetes/certs/{{ item }}.crt --key-file /etc/kubernetes/certs/{{ item }}.key --ca-file /etc/kubernetes/certs/ca.crt set /coreos.com/network/config < /etc/kubernetes/flanneld.json
      with_items: "{{ groups.master }}"

    - name: /etc/sysconfig/flanneld
      template: src=flanneld.j2 dest=/etc/sysconfig/flanneld
      with_items: "{{ groups.master }}"

    - name: Remove docker0
      shell: ip link delete docker0 || true

    - name: Enable flanneld
      command: systemctl enable flanneld.service

    - name: Start flanneld
      command: systemctl start flanneld.service

    - name: Secure kubectl
      command: chdir=/tmp {{ item }}
      with_items:
        - kubectl config set-cluster secure  --certificate-authority=/etc/kubernetes/certs/ca.crt  --embed-certs=false --server=https://{{ masterip }}:6443
        - kubectl config set-credentials admin --client-key=/etc/kubernetes/certs/{{ ansible_hostname }}.key --client-certificate=/etc/kubernetes/certs/{{ ansible_hostname }}.crt --embed-certs=false
        - kubectl config set-context secure
        - kubectl config set-context secure --cluster=secure --user=admin
        - kubectl config use-context secure

- hosts: nodes
  become: true
  vars:
    masterip: "{{ hostvars[groups.master[0]]['ansible_ssh_host'] }}"
  tasks:

    - name: Copy certs from localhost to Nodes
      synchronize: src=certs dest=/etc/kubernetes/

    - name: /etc/kubernetes/config
      template: src=config.j2 dest=/etc/kubernetes/config

    - name: /etc/kubernetes/proxy
      template: src=proxy.j2 dest=/etc/kubernetes/proxy

    - name: kubeconfigs
      template: src=kubeconfig.j2 dest=/etc/kubernetes/{{ item[0] }}.kubeconfig
      with_nested:
        - ['kubelet', 'proxy']
        - ["{{ansible_hostname }}"]

    - name: /etc/kubernetes/kubelet
      template: src=kubelet.j2 dest=/etc/kubernetes/kubelet

    - name: /etc/sysconfig/flanneld
      template: src=flanneld.j2 dest=/etc/sysconfig/flanneld
      with_items: "{{ groups.master }}"

    - name: Enable services
      command: systemctl enable kube-proxy.service kubelet.service flanneld.service docker.service

    - name: Start services
      command: systemctl start kube-proxy.service kubelet.service flanneld.service docker.service

    - name: Stop docker and flanneld
      command: systemctl stop flanneld.service docker.service

    - name: Remove docker0
      shell: ip link delete docker0 || true

    - name: Restart services
      command: systemctl start flanneld.service docker.service kubelet

- hosts: master
  become: true
  vars:
    masterip: "{{ hostvars[groups.master[0]]['ansible_ssh_host'] }}"
  tasks:
    - name: Add skyDNS/kube2sky pod definition
      template: src=skydns.j2 dest=/root/skydns.yaml

    - name: Add skyDNS service definition
      template: src=skydns_svc.j2 dest=/root/skydns-svc.yaml

    - name: Add busybox pod definition
      template: src=busybox.j2 dest=/root/bb.yaml

    - name: Add simple web service definition
      template: src=simplewebservice.j2 dest=/root/simplewebservice.yaml

    - name: Add simple web pod definition
      template: src=simpleweb.j2 dest=/root/simpleweb.yaml

    - name: Add kubernetes-dashboard
      template: src=kubernetes-dashboard.j2 dest=/root/kubernetes-dashboard.yaml

    - name: Create pods and services
      command: chdir=/root {{ item }}
      with_items:
        - kubectl create namespace kube-system
        - kubectl create -f skydns-svc.yaml
        - kubectl create -f skydns.yaml
        - kubectl create -f bb.yaml
        - kubectl create -f simplewebservice.yaml
        - kubectl create -f simpleweb.yaml
        - kubectl create -f kubernetes-dashboard.yaml
